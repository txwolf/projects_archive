{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"./components/Image\";\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport React, { useEffect, useContext } from 'react';\nimport Slider from '@react-native-community/slider';\nimport { useNavigation } from '@react-navigation/native';\nimport Text from \"./components/Text\";\nimport { useRef } from 'react';\nimport { CalcContext } from \"./helpers\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Main = function Main() {\n  var ref = useRef();\n  var navigation = useNavigation();\n\n  var _useContext = useContext(CalcContext),\n      tempInside = _useContext.tempInside,\n      setTempInside = _useContext.setTempInside,\n      scaleF = _useContext.scaleF,\n      setScaleF = _useContext.setScaleF,\n      setLocation = _useContext.setLocation,\n      handlePress = _useContext.handlePress,\n      locationName = _useContext.locationName,\n      setLocationName = _useContext.setLocationName,\n      locationCoords = _useContext.locationCoords,\n      setLocationCoords = _useContext.setLocationCoords,\n      weather = _useContext.weather;\n\n  useEffect(function () {\n    if (locationName) {\n      var _ref$current;\n\n      (_ref$current = ref.current) == null ? void 0 : _ref$current.setAddressText(locationName);\n    }\n  }, [locationName]);\n  return _jsxs(SafeAreaView, {\n    style: {\n      backgroundColor: 'white',\n      flex: 1,\n      paddingHorizontal: 40\n    },\n    children: [_jsx(Image, {\n      resizeMode: \"contain\",\n      style: {\n        height: 50,\n        alignSelf: 'center',\n        marginTop: 20,\n        shadowColor: 'black',\n        shadowOffset: {\n          width: 0,\n          height: 1\n        },\n        shadowOpacity: 0.2\n      },\n      source: require(\"../assets/logo_black.png\")\n    }), _jsxs(View, {\n      children: [_jsx(Text, {\n        style: {\n          textAlign: 'left',\n          marginTop: 30\n        },\n        children: \"let's check your room humidity:\"\n      }), _jsx(Text, {\n        style: {\n          textAlign: 'left',\n          marginTop: 0,\n          marginBottom: 10\n        },\n        children: \"your location?\"\n      }), _jsx(GooglePlacesAutocomplete, {\n        placeholder: \"type your city\",\n        nearbyPlacesAPI: \"GooglePlacesSearch\",\n        debounce: 400,\n        styles: toInputBoxStyles,\n        enablePoweredByContainer: false,\n        query: {\n          key: \"AIzaSyAHi5oO5VZE0ML1wXLG2WgSi1DXZGtWR2E\",\n          language: 'en'\n        },\n        ref: ref,\n        fetchDetails: true,\n        onPress: function onPress(data) {\n          var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          setLocationCoords(_objectSpread({}, details.geometry.location));\n          setLocationName(data.description);\n        },\n        returnKeyType: 'search',\n        textInputProps: {\n          placeholderTextColor: 'gray',\n          returnKeyType: 'search'\n        }\n      })]\n    }), _jsxs(View, {\n      style: {\n        marginTop: 20\n      },\n      children: [_jsx(Text, {\n        children: \"your room temperature?\"\n      }), _jsxs(TouchableOpacity, {\n        style: {\n          flexDirection: 'row'\n        },\n        onPress: function onPress() {\n          return setScaleF(function (value) {\n            return !value;\n          });\n        },\n        children: [_jsx(Text, {\n          style: {\n            color: scaleF ? '#cbcbcb' : 'black'\n          },\n          children: \"\\xB0C\"\n        }), _jsx(Text, {\n          children: \"/\"\n        }), _jsx(Text, {\n          style: {\n            color: scaleF ? 'black' : '#b4b4b4'\n          },\n          children: \"\\xB0F\"\n        })]\n      })]\n    }), _jsxs(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center'\n      },\n      children: [_jsxs(Text, {\n        style: {\n          fontSize: 60,\n          fontWeight: '700',\n          width: '80%',\n          textAlign: 'center'\n        },\n        children: [tempInside.toFixed(1), _jsxs(Text, {\n          style: {\n            fontWeight: '300'\n          },\n          children: [\" \\xB0\", scaleF ? 'F' : 'C']\n        })]\n      }), _jsx(Slider, {\n        minimumValue: scaleF ? 53 : 12,\n        maximumValue: scaleF ? 95 : 35,\n        step: 0.1,\n        style: {\n          width: 350,\n          top: -50,\n          right: -100,\n          transform: [{\n            rotate: '270deg'\n          }]\n        },\n        minimumTrackTintColor: \"#94000078\",\n        maximumTrackTintColor: \"#0064c16d\",\n        onValueChange: function onValueChange(value) {\n          return setTempInside(value);\n        },\n        value: tempInside\n      })]\n    }), _jsx(TouchableOpacity, {\n      style: {\n        backgroundColor: '#F6F4FF',\n        color: 'white',\n        height: 50,\n        justifyContent: 'center',\n        borderRadius: 4,\n        borderColor: '#3B25A8',\n        borderWidth: 1,\n        marginBottom: 50\n      },\n      onPress: function onPress() {\n        if (locationCoords && weather) {\n          handlePress();\n          navigation.navigate('Result');\n        }\n      },\n      children: _jsx(Text, {\n        style: {\n          color: '#3B25A8',\n          fontSize: 22,\n          fontWeight: '500',\n          alignSelf: 'center'\n        },\n        children: \"check\"\n      })\n    })]\n  });\n};\n\nvar toInputBoxStyles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    marginTop: 10,\n    flex: 0\n  },\n  textInput: {\n    backgroundColor: 'white',\n    borderRadius: 0,\n    fontSize: 18,\n    paddingLeft: 15,\n    paddingRight: 30,\n    borderColor: '#3B25A8',\n    borderWidth: 1,\n    height: 50\n  },\n  textInputContainer: {},\n  row: {},\n  separator: {}\n});\nexport default Main;","map":{"version":3,"sources":["/Users/tom/Documents/Dev/humidd/app/src/Main.jsx"],"names":["Image","GooglePlacesAutocomplete","SafeAreaView","React","useEffect","useContext","Slider","useNavigation","Text","useRef","CalcContext","Main","ref","navigation","tempInside","setTempInside","scaleF","setScaleF","setLocation","handlePress","locationName","setLocationName","locationCoords","setLocationCoords","weather","current","setAddressText","backgroundColor","flex","paddingHorizontal","height","alignSelf","marginTop","shadowColor","shadowOffset","width","shadowOpacity","require","textAlign","marginBottom","toInputBoxStyles","key","language","data","details","geometry","location","description","placeholderTextColor","returnKeyType","flexDirection","value","color","justifyContent","fontSize","fontWeight","toFixed","top","right","transform","rotate","borderRadius","borderColor","borderWidth","navigate","StyleSheet","create","container","textInput","paddingLeft","paddingRight","textInputContainer","row","separator"],"mappings":";;;;;;;;;AACA,OAAOA,KAAP;AACA,SAASC,wBAAT,QAAyC,yCAAzC;AACA,SAASC,YAAT,QAA6B,gCAA7B;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,IAAP;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,WAAT;;;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,MAAMC,GAAG,GAAGH,MAAM,EAAlB;AACA,MAAMI,UAAU,GAAGN,aAAa,EAAhC;;AACA,oBAYIF,UAAU,CAACK,WAAD,CAZd;AAAA,MACEI,UADF,eACEA,UADF;AAAA,MAEEC,aAFF,eAEEA,aAFF;AAAA,MAGEC,MAHF,eAGEA,MAHF;AAAA,MAIEC,SAJF,eAIEA,SAJF;AAAA,MAKEC,WALF,eAKEA,WALF;AAAA,MAMEC,WANF,eAMEA,WANF;AAAA,MAOEC,YAPF,eAOEA,YAPF;AAAA,MAQEC,eARF,eAQEA,eARF;AAAA,MASEC,cATF,eASEA,cATF;AAAA,MAUEC,iBAVF,eAUEA,iBAVF;AAAA,MAWEC,OAXF,eAWEA,OAXF;;AAcApB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIgB,YAAJ,EAAkB;AAAA;;AAChB,sBAAAR,GAAG,CAACa,OAAJ,kCAAaC,cAAb,CAA4BN,YAA5B;AACD;AACF,GAJQ,EAIN,CAACA,YAAD,CAJM,CAAT;AAMA,SACE,MAAC,YAAD;AACE,IAAA,KAAK,EAAE;AAAEO,MAAAA,eAAe,EAAE,OAAnB;AAA4BC,MAAAA,IAAI,EAAE,CAAlC;AAAqCC,MAAAA,iBAAiB,EAAE;AAAxD,KADT;AAAA,eAIE,KAAC,KAAD;AACE,MAAA,UAAU,EAAC,SADb;AAEE,MAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAE,EADH;AAELC,QAAAA,SAAS,EAAE,QAFN;AAGLC,QAAAA,SAAS,EAAE,EAHN;AAMLC,QAAAA,WAAW,EAAE,OANR;AAOLC,QAAAA,YAAY,EAAE;AAAEC,UAAAA,KAAK,EAAE,CAAT;AAAYL,UAAAA,MAAM,EAAE;AAApB,SAPT;AAQLM,QAAAA,aAAa,EAAE;AARV,OAFT;AAYE,MAAA,MAAM,EAAEC,OAAO;AAZjB,MAJF,EAoBE,MAAC,IAAD;AAAA,iBACE,KAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAE,MADN;AAELN,UAAAA,SAAS,EAAE;AAFN,SADT;AAAA;AAAA,QADF,EASE,KAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLM,UAAAA,SAAS,EAAE,MADN;AAELN,UAAAA,SAAS,EAAE,CAFN;AAGLO,UAAAA,YAAY,EAAE;AAHT,SADT;AAAA;AAAA,QATF,EAkBE,KAAC,wBAAD;AACE,QAAA,WAAW,EAAC,gBADd;AAEE,QAAA,eAAe,EAAC,oBAFlB;AAGE,QAAA,QAAQ,EAAE,GAHZ;AAIE,QAAA,MAAM,EAAEC,gBAJV;AAKE,QAAA,wBAAwB,EAAE,KAL5B;AAME,QAAA,KAAK,EAAE;AACLC,UAAAA,GAAG,2CADE;AAELC,UAAAA,QAAQ,EAAE;AAFL,SANT;AAUE,QAAA,GAAG,EAAE9B,GAVP;AAWE,QAAA,YAAY,EAAE,IAXhB;AAYE,QAAA,OAAO,EAAE,iBAAC+B,IAAD,EAA0B;AAAA,cAAnBC,OAAmB,uEAAT,IAAS;AACjCrB,UAAAA,iBAAiB,mBAAMqB,OAAO,CAACC,QAAR,CAAiBC,QAAvB,EAAjB;AACAzB,UAAAA,eAAe,CAACsB,IAAI,CAACI,WAAN,CAAf;AACD,SAfH;AAgBE,QAAA,aAAa,EAAE,QAhBjB;AAiBE,QAAA,cAAc,EAAE;AACdC,UAAAA,oBAAoB,EAAE,MADR;AAEdC,UAAAA,aAAa,EAAE;AAFD;AAjBlB,QAlBF;AAAA,MApBF,EA8DE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEjB,QAAAA,SAAS,EAAE;AAAb,OAAb;AAAA,iBACE,KAAC,IAAD;AAAA;AAAA,QADF,EAKE,MAAC,gBAAD;AACE,QAAA,KAAK,EAAE;AAAEkB,UAAAA,aAAa,EAAE;AAAjB,SADT;AAEE,QAAA,OAAO,EAAE;AAAA,iBAAMjC,SAAS,CAAC,UAACkC,KAAD;AAAA,mBAAW,CAACA,KAAZ;AAAA,WAAD,CAAf;AAAA,SAFX;AAAA,mBAIE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAEpC,MAAM,GAAG,SAAH,GAAe;AAA9B,WAAb;AAAA;AAAA,UAJF,EAKE,KAAC,IAAD;AAAA;AAAA,UALF,EAME,KAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAEoC,YAAAA,KAAK,EAAEpC,MAAM,GAAG,OAAH,GAAa;AAA5B,WAAb;AAAA;AAAA,UANF;AAAA,QALF;AAAA,MA9DF,EA8EE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEY,QAAAA,IAAI,EAAE,CAAR;AAAWyB,QAAAA,cAAc,EAAE;AAA3B,OAAb;AAAA,iBAEE,MAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE,EADL;AAELC,UAAAA,UAAU,EAAE,KAFP;AAGLpB,UAAAA,KAAK,EAAE,KAHF;AAILG,UAAAA,SAAS,EAAE;AAJN,SADT;AAAA,mBAQGxB,UAAU,CAAC0C,OAAX,CAAmB,CAAnB,CARH,EASE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAED,YAAAA,UAAU,EAAE;AAAd,WAAb;AAAA,8BAAuCvC,MAAM,GAAG,GAAH,GAAS,GAAtD;AAAA,UATF;AAAA,QAFF,EAaE,KAAC,MAAD;AACE,QAAA,YAAY,EAAEA,MAAM,GAAG,EAAH,GAAQ,EAD9B;AAEE,QAAA,YAAY,EAAEA,MAAM,GAAG,EAAH,GAAQ,EAF9B;AAGE,QAAA,IAAI,EAAE,GAHR;AAIE,QAAA,KAAK,EAAE;AACLmB,UAAAA,KAAK,EAAE,GADF;AAELsB,UAAAA,GAAG,EAAE,CAAC,EAFD;AAGLC,UAAAA,KAAK,EAAE,CAAC,GAHH;AAILC,UAAAA,SAAS,EAAE,CAAC;AAAEC,YAAAA,MAAM,EAAE;AAAV,WAAD;AAJN,SAJT;AAUE,QAAA,qBAAqB,EAAC,WAVxB;AAWE,QAAA,qBAAqB,EAAC,WAXxB;AAYE,QAAA,aAAa,EAAE,uBAACT,KAAD;AAAA,iBAAWpC,aAAa,CAACoC,KAAD,CAAxB;AAAA,SAZjB;AAaE,QAAA,KAAK,EAAErC;AAbT,QAbF;AAAA,MA9EF,EA6GE,KAAC,gBAAD;AACE,MAAA,KAAK,EAAE;AACLa,QAAAA,eAAe,EAAE,SADZ;AAELyB,QAAAA,KAAK,EAAE,OAFF;AAGLtB,QAAAA,MAAM,EAAE,EAHH;AAILuB,QAAAA,cAAc,EAAE,QAJX;AAKLQ,QAAAA,YAAY,EAAE,CALT;AAMLC,QAAAA,WAAW,EAAE,SANR;AAOLC,QAAAA,WAAW,EAAE,CAPR;AAQLxB,QAAAA,YAAY,EAAE;AART,OADT;AAWE,MAAA,OAAO,EAAE,mBAAM;AACb,YAAIjB,cAAc,IAAIE,OAAtB,EAA+B;AAC7BL,UAAAA,WAAW;AACXN,UAAAA,UAAU,CAACmD,QAAX,CAAoB,QAApB;AACD;AACF,OAhBH;AAAA,gBAkBE,KAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLZ,UAAAA,KAAK,EAAE,SADF;AAELE,UAAAA,QAAQ,EAAE,EAFL;AAGLC,UAAAA,UAAU,EAAE,KAHP;AAILxB,UAAAA,SAAS,EAAE;AAJN,SADT;AAAA;AAAA;AAlBF,MA7GF;AAAA,IADF;AA6ID,CApKD;;AAsKA,IAAMS,gBAAgB,GAAGyB,UAAU,CAACC,MAAX,CAAkB;AACzCC,EAAAA,SAAS,EAAE;AACTxC,IAAAA,eAAe,EAAE,OADR;AAETK,IAAAA,SAAS,EAAE,EAFF;AAGTJ,IAAAA,IAAI,EAAE;AAHG,GAD8B;AAMzCwC,EAAAA,SAAS,EAAE;AACTzC,IAAAA,eAAe,EAAE,OADR;AAETkC,IAAAA,YAAY,EAAE,CAFL;AAGTP,IAAAA,QAAQ,EAAE,EAHD;AAITe,IAAAA,WAAW,EAAE,EAJJ;AAKTC,IAAAA,YAAY,EAAE,EALL;AAMTR,IAAAA,WAAW,EAAE,SANJ;AAOTC,IAAAA,WAAW,EAAE,CAPJ;AAQTjC,IAAAA,MAAM,EAAE;AARC,GAN8B;AAgBzCyC,EAAAA,kBAAkB,EAAE,EAhBqB;AAiBzCC,EAAAA,GAAG,EAAE,EAjBoC;AAkBzCC,EAAAA,SAAS,EAAE;AAlB8B,CAAlB,CAAzB;AAqBA,eAAe9D,IAAf","sourcesContent":["import { View, StyleSheet, TouchableOpacity } from 'react-native'\nimport Image from './components/Image'\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete'\nimport { SafeAreaView } from 'react-native-safe-area-context'\nimport { GOOGLE_APIKEY } from '@env'\nimport React, { useEffect, useContext } from 'react'\nimport Slider from '@react-native-community/slider'\nimport { useNavigation } from '@react-navigation/native'\nimport Text from './components/Text'\nimport { useRef } from 'react'\nimport { CalcContext } from './helpers'\n\nconst Main = () => {\n  const ref = useRef()\n  const navigation = useNavigation()\n  const {\n    tempInside,\n    setTempInside,\n    scaleF,\n    setScaleF,\n    setLocation,\n    handlePress,\n    locationName,\n    setLocationName,\n    locationCoords,\n    setLocationCoords,\n    weather,\n  } = useContext(CalcContext)\n\n  useEffect(() => {\n    if (locationName) {\n      ref.current?.setAddressText(locationName)\n    }\n  }, [locationName])\n\n  return (\n    <SafeAreaView\n      style={{ backgroundColor: 'white', flex: 1, paddingHorizontal: 40 }}\n    >\n      {/* image */}\n      <Image\n        resizeMode=\"contain\"\n        style={{\n          height: 50,\n          alignSelf: 'center',\n          marginTop: 20,\n\n          // add shadows for iOS only\n          shadowColor: 'black',\n          shadowOffset: { width: 0, height: 1 },\n          shadowOpacity: 0.2,\n        }}\n        source={require('../assets/logo_black.png')}\n      />\n\n      {/* location input */}\n      <View>\n        <Text\n          style={{\n            textAlign: 'left',\n            marginTop: 30,\n          }}\n        >\n          let's check your room humidity:\n        </Text>\n        <Text\n          style={{\n            textAlign: 'left',\n            marginTop: 0,\n            marginBottom: 10,\n          }}\n        >\n          your location?\n        </Text>\n        <GooglePlacesAutocomplete\n          placeholder=\"type your city\"\n          nearbyPlacesAPI=\"GooglePlacesSearch\"\n          debounce={400}\n          styles={toInputBoxStyles}\n          enablePoweredByContainer={false}\n          query={{\n            key: GOOGLE_APIKEY,\n            language: 'en',\n          }}\n          ref={ref}\n          fetchDetails={true}\n          onPress={(data, details = null) => {\n            setLocationCoords({ ...details.geometry.location })\n            setLocationName(data.description)\n          }}\n          returnKeyType={'search'}\n          textInputProps={{\n            placeholderTextColor: 'gray',\n            returnKeyType: 'search',\n          }}\n        />\n      </View>\n\n      <View style={{ marginTop: 20 }}>\n        <Text>your room temperature?</Text>\n\n        {/* C/F switcher */}\n\n        <TouchableOpacity\n          style={{ flexDirection: 'row' }}\n          onPress={() => setScaleF((value) => !value)}\n        >\n          <Text style={{ color: scaleF ? '#cbcbcb' : 'black' }}>°C</Text>\n          <Text>/</Text>\n          <Text style={{ color: scaleF ? 'black' : '#b4b4b4' }}>°F</Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* 2. slider intro */}\n      <View style={{ flex: 1, justifyContent: 'center' }}>\n        {/* slider */}\n        <Text\n          style={{\n            fontSize: 60,\n            fontWeight: '700',\n            width: '80%',\n            textAlign: 'center',\n          }}\n        >\n          {tempInside.toFixed(1)}\n          <Text style={{ fontWeight: '300' }}> °{scaleF ? 'F' : 'C'}</Text>\n        </Text>\n        <Slider\n          minimumValue={scaleF ? 53 : 12}\n          maximumValue={scaleF ? 95 : 35}\n          step={0.1}\n          style={{\n            width: 350,\n            top: -50,\n            right: -100,\n            transform: [{ rotate: '270deg' }],\n          }}\n          minimumTrackTintColor=\"#94000078\"\n          maximumTrackTintColor=\"#0064c16d\"\n          onValueChange={(value) => setTempInside(value)}\n          value={tempInside}\n        />\n      </View>\n\n      {/* button */}\n      <TouchableOpacity\n        style={{\n          backgroundColor: '#F6F4FF',\n          color: 'white',\n          height: 50,\n          justifyContent: 'center',\n          borderRadius: 4,\n          borderColor: '#3B25A8',\n          borderWidth: 1,\n          marginBottom: 50,\n        }}\n        onPress={() => {\n          if (locationCoords && weather) {\n            handlePress()\n            navigation.navigate('Result')\n          }\n        }}\n      >\n        <Text\n          style={{\n            color: '#3B25A8',\n            fontSize: 22,\n            fontWeight: '500',\n            alignSelf: 'center',\n          }}\n        >\n          check\n        </Text>\n      </TouchableOpacity>\n    </SafeAreaView>\n  )\n}\n\nconst toInputBoxStyles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    marginTop: 10,\n    flex: 0,\n  },\n  textInput: {\n    backgroundColor: 'white',\n    borderRadius: 0,\n    fontSize: 18,\n    paddingLeft: 15,\n    paddingRight: 30,\n    borderColor: '#3B25A8',\n    borderWidth: 1,\n    height: 50,\n  },\n  textInputContainer: {},\n  row: {},\n  separator: {},\n})\n\nexport default Main\n"]},"metadata":{},"sourceType":"module"}