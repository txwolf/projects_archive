{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Intro from \"./src/Intro\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useState, useEffect } from 'react';\nimport { useFirstRender, cToF, fToC, computeHumidity } from \"./src/helpers\";\nimport { CalcContext } from \"./src/helpers\";\nimport * as Location from 'expo-location';\nimport Main from \"./src/Main\";\nimport Result from \"./src/Result\";\nimport Loading from \"./src/Loading\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\n\nvar App = function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      locationCoords = _useState4[0],\n      setLocationCoords = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      locationName = _useState6[0],\n      setLocationName = _useState6[1];\n\n  var _useState7 = useState(21.0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      tempInside = _useState8[0],\n      setTempInside = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      humidityInside = _useState10[0],\n      setHumidityInside = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      scaleF = _useState12[0],\n      setScaleF = _useState12[1];\n\n  var firstRender = useFirstRender();\n  useEffect(function () {\n    if (locationCoords && !weather) {\n      var fetchWeather = function fetchWeather() {\n        var response;\n        return _regeneratorRuntime.async(function fetchWeather$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + locationCoords.lat + \"&lon=\" + locationCoords.lng + \"&exclude=minutely,hourly,daily,alerts&appid=\" + \"ee8881eb2641f48e9811f3a9e4df3460\").catch(function (err) {\n                  return console.log(err);\n                }));\n\n              case 2:\n                response = _context.sent;\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(response.json());\n\n              case 5:\n                response = _context.sent;\n                setWeather(response.current);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      fetchWeather();\n    }\n  }, [locationCoords]);\n  useEffect(function () {\n    if (locationCoords && !locationName) {\n      var fetchLocationName = function fetchLocationName() {\n        var response;\n        return _regeneratorRuntime.async(function fetchLocationName$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regeneratorRuntime.awrap(fetch(\"http://api.openweathermap.org/geo/1.0/reverse?lat=\" + locationCoords.lat + \"&lon=\" + locationCoords.lng + \"&limit=1&appid=\" + \"ee8881eb2641f48e9811f3a9e4df3460\"));\n\n              case 2:\n                response = _context2.sent;\n                _context2.next = 5;\n                return _regeneratorRuntime.awrap(response.json());\n\n              case 5:\n                response = _context2.sent;\n                setLocationName(response[0].local_names.en);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      fetchLocationName();\n    }\n  }, [locationCoords]);\n  useEffect(function () {\n    var getLocation = function getLocation() {\n      var _await$Location$reque, status, position;\n\n      return _regeneratorRuntime.async(function getLocation$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context3.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== 'granted')) {\n                _context3.next = 7;\n                break;\n              }\n\n              console.log('Permission to access location was denied');\n              return _context3.abrupt(\"return\");\n\n            case 7:\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 9:\n              position = _context3.sent;\n              setLocationCoords({\n                lat: position.coords.latitude,\n                lng: position.coords.longitude\n              });\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getLocation();\n  }, []);\n\n  var handlePress = function handlePress() {\n    setHumidityInside(Math.round(computeHumidity(scaleF ? fToC(tempInside) : tempInside, Math.round((weather.temp - 273.15) * 100) / 100, weather.humidity)));\n  };\n\n  var value = {\n    tempInside: tempInside,\n    setTempInside: setTempInside,\n    humidityInside: humidityInside,\n    setHumidityInside: setHumidityInside,\n    scaleF: scaleF,\n    setScaleF: setScaleF,\n    weather: weather,\n    setWeather: setWeather,\n    locationName: locationName,\n    setLocationName: setLocationName,\n    locationCoords: locationCoords,\n    setLocationCoords: setLocationCoords,\n    handlePress: handlePress\n  };\n  useEffect(function () {\n    if (firstRender) return;\n\n    if (scaleF) {\n      setTempInside(function (tempInside) {\n        return Math.round((cToF(tempInside) + 0.1) * 10) / 10;\n      });\n    } else if (!scaleF) {\n      setTempInside(function (tempInside) {\n        return Math.round((fToC(tempInside) + 0.1) * 10) / 10;\n      });\n    }\n  }, [scaleF]);\n  return _jsx(CalcContext.Provider, {\n    value: value,\n    children: _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        initialRouteName: \"Intro\",\n        screenOptions: {\n          headerShown: false\n        },\n        children: [_jsx(Stack.Screen, {\n          name: \"Loading\",\n          component: Loading\n        }), _jsx(Stack.Screen, {\n          name: \"Intro\",\n          component: Intro\n        }), _jsx(Stack.Screen, {\n          name: \"Main\",\n          component: Main\n        }), _jsx(Stack.Screen, {\n          name: \"Result\",\n          component: Result\n        })]\n      })\n    })\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/tom/Documents/Dev/humidd/app/App.jsx"],"names":["Intro","NavigationContainer","createNativeStackNavigator","useState","useEffect","useFirstRender","cToF","fToC","computeHumidity","CalcContext","Location","Main","Result","Loading","Stack","App","weather","setWeather","locationCoords","setLocationCoords","locationName","setLocationName","tempInside","setTempInside","humidityInside","setHumidityInside","scaleF","setScaleF","firstRender","fetchWeather","fetch","lat","lng","catch","err","console","log","response","json","current","fetchLocationName","local_names","en","getLocation","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","position","coords","latitude","longitude","handlePress","Math","round","temp","humidity","value","headerShown"],"mappings":"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","sourcesContent":["import Intro from './src/Intro'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createNativeStackNavigator } from '@react-navigation/native-stack'\nimport { useState, useEffect } from 'react'\nimport { useFirstRender, cToF, fToC, computeHumidity } from './src/helpers'\nimport { WEATHER_APIKEY } from '@env'\nimport { CalcContext } from './src/helpers'\nimport * as Location from 'expo-location'\n\nimport Main from './src/Main'\nimport Result from './src/Result'\nimport Loading from './src/Loading'\n\nconst Stack = createNativeStackNavigator()\n\nconst App = () => {\n  const [weather, setWeather] = useState(null)\n  const [locationCoords, setLocationCoords] = useState(null)\n  const [locationName, setLocationName] = useState(null)\n  const [tempInside, setTempInside] = useState(21.0)\n  const [humidityInside, setHumidityInside] = useState(null)\n  const [scaleF, setScaleF] = useState(false)\n  const firstRender = useFirstRender()\n\n  //get weather when coords updated\n  useEffect(() => {\n    if (locationCoords && !weather) {\n      const fetchWeather = async () => {\n        let response = await fetch(\n          `https://api.openweathermap.org/data/2.5/onecall?lat=${locationCoords.lat}&lon=${locationCoords.lng}&exclude=minutely,hourly,daily,alerts&appid=${WEATHER_APIKEY}`,\n        ).catch((err) => console.log(err))\n        response = await response.json()\n        setWeather(response.current)\n      }\n      fetchWeather()\n    }\n  }, [locationCoords])\n\n  //get location name when coords updated\n  useEffect(() => {\n    if (locationCoords && !locationName) {\n      const fetchLocationName = async () => {\n        let response = await fetch(\n          `http://api.openweathermap.org/geo/1.0/reverse?lat=${locationCoords.lat}&lon=${locationCoords.lng}&limit=1&appid=${WEATHER_APIKEY}`,\n        )\n        response = await response.json()\n        setLocationName(response[0].local_names.en)\n      }\n      fetchLocationName()\n    }\n  }, [locationCoords])\n\n  //get user GPS location\n  useEffect(() => {\n    const getLocation = async () => {\n      let { status } = await Location.requestForegroundPermissionsAsync()\n      if (status !== 'granted') {\n        console.log('Permission to access location was denied')\n        return\n      }\n\n      let position = await Location.getCurrentPositionAsync({})\n      setLocationCoords({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n      })\n    }\n    getLocation()\n  }, [])\n\n  const handlePress = () => {\n    setHumidityInside(\n      Math.round(\n        computeHumidity(\n          scaleF ? fToC(tempInside) : tempInside,\n          Math.round((weather.temp - 273.15) * 100) / 100,\n          weather.humidity,\n        ),\n      ),\n    )\n  }\n\n  const value = {\n    tempInside,\n    setTempInside,\n    humidityInside,\n    setHumidityInside,\n    scaleF,\n    setScaleF,\n    weather,\n    setWeather,\n    locationName,\n    setLocationName,\n    locationCoords,\n    setLocationCoords,\n    handlePress,\n  }\n\n  useEffect(() => {\n    if (firstRender) return\n    if (scaleF) {\n      setTempInside(\n        (tempInside) => Math.round((cToF(tempInside) + 0.1) * 10) / 10,\n      )\n    } else if (!scaleF) {\n      setTempInside(\n        (tempInside) => Math.round((fToC(tempInside) + 0.1) * 10) / 10,\n      )\n    }\n  }, [scaleF])\n\n  return (\n    <CalcContext.Provider value={value}>\n      <NavigationContainer>\n        <Stack.Navigator\n          initialRouteName=\"Intro\"\n          screenOptions={{ headerShown: false }}\n        >\n          <Stack.Screen name=\"Loading\" component={Loading} />\n          <Stack.Screen name=\"Intro\" component={Intro} />\n          <Stack.Screen name=\"Main\" component={Main} />\n          <Stack.Screen name=\"Result\" component={Result} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </CalcContext.Provider>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}