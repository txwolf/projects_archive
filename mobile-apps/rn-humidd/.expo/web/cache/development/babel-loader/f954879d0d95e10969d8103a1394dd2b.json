{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport React, { useState, useEffect } from 'react';\nimport Slider from '@react-native-community/slider';\nimport { useFirstRender } from \"./helpers\";\nimport { Element } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SliderExample = function (_React$Component) {\n  _inherits(SliderExample, _React$Component);\n\n  var _super = _createSuper(SliderExample);\n\n  function SliderExample() {\n    var _this;\n\n    _classCallCheck(this, SliderExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      value: _this.props.value\n    };\n    return _this;\n  }\n\n  _createClass(SliderExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsxs(View, {\n        children: [_jsx(Text, {\n          style: styles.text,\n          children: this.state.value && +this.state.value.toFixed(3)\n        }), _jsx(Slider, _objectSpread(_objectSpread({\n          step: 0.5,\n          style: styles.slider\n        }, this.props), {}, {\n          onValueChange: function onValueChange(value) {\n            return _this2.setState({\n              value: value\n            });\n          }\n        }))]\n      });\n    }\n  }]);\n\n  return SliderExample;\n}(React.Component);\n\nSliderExample.defaultProps = {\n  value: 0\n};\nvar styles = StyleSheet.create({\n  slider: {\n    width: 300,\n    opacity: 1,\n    height: 50,\n    marginTop: 10\n  },\n  text: {\n    fontSize: 14,\n    textAlign: 'center',\n    fontWeight: '500',\n    margin: 0\n  }\n});\n\nvar Main = function Main() {\n  var _useState = useState(21.0),\n      _useState2 = _slicedToArray(_useState, 2),\n      tempInside = _useState2[0],\n      setTempInside = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scale = _useState4[0],\n      setScale = _useState4[1];\n\n  var firstRender = useFirstRender();\n  useEffect(function () {\n    if (firstRender) return;\n\n    if (scale) {\n      setTempInside(function (tempInside) {\n        return Math.round((cToF(tempInside) + 0.1) * 10) / 10;\n      });\n    } else if (!scale) {\n      setTempInside(function (tempInside) {\n        return Math.round((fToC(tempInside) + 0.1) * 10) / 10;\n      });\n    }\n  }, [scale]);\n  return _jsxs(SafeAreaView, {\n    style: {\n      backgroundColor: 'white',\n      flex: 1\n    },\n    children: [_jsx(Image, {\n      resizeMode: \"contain\",\n      style: {\n        height: 50,\n        alignSelf: 'center',\n        marginTop: 20\n      },\n      source: require(\"../assets/logo_black.png\")\n    }), _jsxs(View, {\n      children: [_jsx(Text, {\n        style: {\n          textAlign: 'center',\n          marginTop: 50,\n          fontSize: 18\n        },\n        children: \"1. location\"\n      }), _jsx(GooglePlacesAutocomplete, {\n        placeholder: \"type your city\",\n        nearbyPlacesAPI: \"GooglePlacesSearch\",\n        debounce: 400,\n        styles: toInputBoxStyles,\n        enablePoweredByContainer: false,\n        query: {\n          key: \"AIzaSyAHi5oO5VZE0ML1wXLG2WgSi1DXZGtWR2E\",\n          language: 'en'\n        },\n        fetchDetails: true,\n        onPress: function onPress(data) {\n          var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        },\n        returnKeyType: 'search'\n      })]\n    }), _jsxs(View, {\n      style: [{\n        flex: 1,\n        alignItems: 'center',\n        marginTop: 100\n      }],\n      children: [_jsxs(View, {\n        style: {\n          top: -60\n        },\n        children: [_jsx(Text, {\n          style: {\n            fontSize: 18\n          },\n          children: \"2. room temperature\"\n        }), _jsx(TouchableOpacity, {\n          children: _jsx(Text, {\n            children: \"Hi\"\n          })\n        })]\n      }), _jsxs(Text, {\n        style: {\n          fontSize: 50,\n          fontWeight: '700',\n          left: -40,\n          top: 110\n        },\n        children: [tempInside.toFixed(1), _jsxs(Text, {\n          style: {\n            fontWeight: '300'\n          },\n          children: [\" \\xB0\", !scale ? 'C' : scale]\n        })]\n      }), _jsx(Slider, {\n        minimumValue: 10,\n        maximumValue: 38,\n        step: 0.1,\n        style: {\n          width: 300,\n          top: 70,\n          right: -110,\n          transform: [{\n            rotate: '270deg'\n          }]\n        },\n        minimumTrackTintColor: \"#94000078\",\n        maximumTrackTintColor: \"#0064c16d\",\n        onValueChange: function onValueChange(value) {\n          return setTempInside(value);\n        },\n        value: tempInside\n      })]\n    })]\n  });\n};\n\nvar toInputBoxStyles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    marginTop: 10,\n    flex: 0\n  },\n  textInput: {\n    backgroundColor: '#dddddf86',\n    borderRadius: 0,\n    fontSize: 18,\n    paddingLeft: 20,\n    paddingRight: 30\n  },\n  textInputContainer: {\n    marginHorizontal: 40\n  },\n  row: {\n    marginHorizontal: 40\n  },\n  separator: {\n    marginHorizontal: 40\n  }\n});\nexport default Main;","map":{"version":3,"sources":["/Users/tom/Documents/webdev/projects/humidd/app/src/Main.jsx"],"names":["GooglePlacesAutocomplete","SafeAreaView","React","useState","useEffect","Slider","useFirstRender","Element","SliderExample","state","value","props","styles","text","toFixed","slider","setState","Component","defaultProps","StyleSheet","create","width","opacity","height","marginTop","fontSize","textAlign","fontWeight","margin","Main","tempInside","setTempInside","scale","setScale","firstRender","Math","round","cToF","fToC","backgroundColor","flex","alignSelf","require","toInputBoxStyles","key","language","data","details","alignItems","top","left","right","transform","rotate","container","textInput","borderRadius","paddingLeft","paddingRight","textInputContainer","marginHorizontal","row","separator"],"mappings":"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","sourcesContent":["import { Text, View, Image, StyleSheet, TouchableOpacity } from 'react-native'\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete'\nimport { SafeAreaView } from 'react-native-safe-area-context'\nimport { GOOGLE_APIKEY } from '@env'\nimport React, { useState, useEffect } from 'react'\nimport Slider from '@react-native-community/slider'\nimport { useFirstRender } from './helpers'\n\nimport { Element } from 'react'\nclass SliderExample extends React.Component {\n  static defaultProps = {\n    value: 0,\n  }\n\n  state = {\n    value: this.props.value,\n  }\n\n  render() {\n    return (\n      <View>\n        <Text style={styles.text}>\n          {this.state.value && +this.state.value.toFixed(3)}\n        </Text>\n        <Slider\n          step={0.5}\n          style={styles.slider}\n          {...this.props}\n          onValueChange={(value) => this.setState({ value: value })}\n        />\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  slider: {\n    width: 300,\n    opacity: 1,\n    height: 50,\n    marginTop: 10,\n  },\n  text: {\n    fontSize: 14,\n    textAlign: 'center',\n    fontWeight: '500',\n    margin: 0,\n  },\n})\n\nconst Main = () => {\n  const [tempInside, setTempInside] = useState(21.0)\n  const [scale, setScale] = useState(null)\n  const firstRender = useFirstRender()\n\n  useEffect(() => {\n    if (firstRender) return\n    if (scale) {\n      setTempInside(\n        (tempInside) => Math.round((cToF(tempInside) + 0.1) * 10) / 10,\n      )\n    } else if (!scale) {\n      setTempInside(\n        (tempInside) => Math.round((fToC(tempInside) + 0.1) * 10) / 10,\n      )\n    }\n  }, [scale])\n\n  return (\n    <SafeAreaView style={{ backgroundColor: 'white', flex: 1 }}>\n      {/* image */}\n      <Image\n        resizeMode=\"contain\"\n        style={{\n          height: 50,\n          alignSelf: 'center',\n          marginTop: 20,\n        }}\n        source={require('../assets/logo_black.png')}\n      />\n\n      {/* location input */}\n      <View>\n        <Text style={{ textAlign: 'center', marginTop: 50, fontSize: 18 }}>\n          1. location\n        </Text>\n        <GooglePlacesAutocomplete\n          placeholder=\"type your city\"\n          nearbyPlacesAPI=\"GooglePlacesSearch\"\n          debounce={400}\n          styles={toInputBoxStyles}\n          enablePoweredByContainer={false}\n          query={{\n            key: GOOGLE_APIKEY,\n            language: 'en',\n          }}\n          fetchDetails={true}\n          onPress={(data, details = null) => {}}\n          returnKeyType={'search'}\n        />\n      </View>\n\n      {/* slider */}\n      <View style={[{ flex: 1, alignItems: 'center', marginTop: 100 }]}>\n        <View style={{ top: -60 }}>\n          <Text style={{ fontSize: 18 }}>2. room temperature</Text>\n          <TouchableOpacity>\n            <Text>Hi</Text>\n          </TouchableOpacity>\n        </View>\n        <Text style={{ fontSize: 50, fontWeight: '700', left: -40, top: 110 }}>\n          {tempInside.toFixed(1)}\n          <Text style={{ fontWeight: '300' }}> °{!scale ? 'C' : scale}</Text>\n        </Text>\n        <Slider\n          minimumValue={10}\n          maximumValue={38}\n          step={0.1}\n          style={{\n            width: 300,\n            top: 70,\n            right: -110,\n            transform: [{ rotate: '270deg' }],\n          }}\n          minimumTrackTintColor=\"#94000078\"\n          maximumTrackTintColor=\"#0064c16d\"\n          onValueChange={(value) => setTempInside(value)}\n          value={tempInside}\n        />\n      </View>\n\n      {/* button */}\n    </SafeAreaView>\n  )\n}\n\nconst toInputBoxStyles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    marginTop: 10,\n    flex: 0,\n  },\n  textInput: {\n    backgroundColor: '#dddddf86',\n    borderRadius: 0,\n    fontSize: 18,\n    paddingLeft: 20,\n    paddingRight: 30,\n  },\n  textInputContainer: {\n    marginHorizontal: 40,\n  },\n  row: {\n    marginHorizontal: 40,\n  },\n  separator: {\n    marginHorizontal: 40,\n  },\n})\n\nexport default Main\n"]},"metadata":{},"sourceType":"module"}